// <auto-generated />
using System;
using MLP.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MLP.API.Migrations
{
    [DbContext(typeof(MLPContext))]
    [Migration("20190924021538_start")]
    partial class start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MLP.API.Entities.NeuralNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NeuralNetworks");
                });

            modelBuilder.Entity("MLP.API.Entities.NeuralNetworkTrainingConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Epochs");

                    b.Property<double>("Eta");

                    b.Property<int>("HiddenActivationFunction");

                    b.Property<int>("HiddenNeuronElements");

                    b.Property<int>("InputSize");

                    b.Property<Guid>("NeuralNetworkId");

                    b.Property<int>("OutputActivationFunction");

                    b.Property<int>("OutputNeuronElements");

                    b.Property<string>("TrainingDatabaseFileName")
                        .IsRequired();

                    b.Property<string>("TrainingDatabaseFileRoute")
                        .IsRequired();

                    b.Property<string>("TrainingDatabaseTestFileName")
                        .IsRequired();

                    b.Property<int>("TrainingDatabaseType");

                    b.Property<double>("WeightsFactor");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkId")
                        .IsUnique();

                    b.ToTable("NeuralNetworkdTrainingConfigs");
                });

            modelBuilder.Entity("MLP.API.Entities.Neuron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bias");

                    b.Property<int>("Index");

                    b.Property<Guid>("NeuralNetworkId");

                    b.Property<int>("NeuronType");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkId");

                    b.ToTable("Neurons");
                });

            modelBuilder.Entity("MLP.API.Entities.NeuronWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index");

                    b.Property<int>("NeuronId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("NeuronId");

                    b.ToTable("NeuronWeights");
                });

            modelBuilder.Entity("MLP.API.Entities.PredictedObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index");

                    b.Property<int>("NeuralNetworkTrainingConfigId");

                    b.Property<string>("ObjectName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkTrainingConfigId");

                    b.ToTable("PredictedObjects");
                });

            modelBuilder.Entity("MLP.API.Entities.NeuralNetworkTrainingConfig", b =>
                {
                    b.HasOne("MLP.API.Entities.NeuralNetwork")
                        .WithOne("TrainingConfig")
                        .HasForeignKey("MLP.API.Entities.NeuralNetworkTrainingConfig", "NeuralNetworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MLP.API.Entities.Neuron", b =>
                {
                    b.HasOne("MLP.API.Entities.NeuralNetwork")
                        .WithMany("Neurons")
                        .HasForeignKey("NeuralNetworkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MLP.API.Entities.NeuronWeight", b =>
                {
                    b.HasOne("MLP.API.Entities.Neuron")
                        .WithMany("Weights")
                        .HasForeignKey("NeuronId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MLP.API.Entities.PredictedObject", b =>
                {
                    b.HasOne("MLP.API.Entities.NeuralNetworkTrainingConfig")
                        .WithMany("PredictedObjects")
                        .HasForeignKey("NeuralNetworkTrainingConfigId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
