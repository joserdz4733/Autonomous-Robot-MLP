// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiLayerPerceptron.Data;

namespace MultiLayerPerceptron.Data.Migrations
{
    [DbContext(typeof(MlpContext))]
    [Migration("20210313192422_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.ImageProcessingConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<double>("BlueAvg")
                        .HasColumnType("float");

                    b.Property<double>("BlueStd")
                        .HasColumnType("float");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GreenAvg")
                        .HasColumnType("float");

                    b.Property<double>("GreenStd")
                        .HasColumnType("float");

                    b.Property<int>("ImageFilter")
                        .HasColumnType("int");

                    b.Property<int>("ImageFilterSize")
                        .HasColumnType("int");

                    b.Property<Guid>("NeuralNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RedAvg")
                        .HasColumnType("float");

                    b.Property<double>("RedStd")
                        .HasColumnType("float");

                    b.Property<int>("ResizeSize")
                        .HasColumnType("int");

                    b.Property<double>("ValuesFactor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ImageProcessingConfigs");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.NeuralNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NeuralNetworks");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.NeuralNetworkTrainingConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Epochs")
                        .HasColumnType("int");

                    b.Property<double>("Eta")
                        .HasColumnType("float");

                    b.Property<int>("HiddenActivationFunction")
                        .HasColumnType("int");

                    b.Property<int>("HiddenNeuronElements")
                        .HasColumnType("int");

                    b.Property<int>("InputSize")
                        .HasColumnType("int");

                    b.Property<Guid>("NeuralNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OutputActivationFunction")
                        .HasColumnType("int");

                    b.Property<int>("OutputNeuronElements")
                        .HasColumnType("int");

                    b.Property<string>("TrainingDatabaseFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingDatabaseFileRoute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingDatabaseTestFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingDatabaseType")
                        .HasColumnType("int");

                    b.Property<double>("WeightsFactor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkId")
                        .IsUnique();

                    b.ToTable("NeuralNetworkTrainingConfigs");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.Neuron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Bias")
                        .HasColumnType("float");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("NeuralNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NeuronType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkId");

                    b.ToTable("Neurons");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.NeuronWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("NeuronId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NeuronId");

                    b.ToTable("NeuronWeights");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.PredictedObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("NeuralNetworkTrainingConfigId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NeuralNetworkTrainingConfigId");

                    b.ToTable("PredictedObjects");
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.NeuralNetworkTrainingConfig", b =>
                {
                    b.HasOne("MultiLayerPerceptron.Data.Entities.NeuralNetwork", null)
                        .WithOne("TrainingConfig")
                        .HasForeignKey("MultiLayerPerceptron.Data.Entities.NeuralNetworkTrainingConfig", "NeuralNetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.Neuron", b =>
                {
                    b.HasOne("MultiLayerPerceptron.Data.Entities.NeuralNetwork", null)
                        .WithMany("Neurons")
                        .HasForeignKey("NeuralNetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.NeuronWeight", b =>
                {
                    b.HasOne("MultiLayerPerceptron.Data.Entities.Neuron", null)
                        .WithMany("Weights")
                        .HasForeignKey("NeuronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiLayerPerceptron.Data.Entities.PredictedObject", b =>
                {
                    b.HasOne("MultiLayerPerceptron.Data.Entities.NeuralNetworkTrainingConfig", null)
                        .WithMany("PredictedObjects")
                        .HasForeignKey("NeuralNetworkTrainingConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
